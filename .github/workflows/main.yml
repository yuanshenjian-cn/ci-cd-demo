name: Main Branch CI/CD to Dev

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# GitHub Actions需要这些权限来创建测试报告和检查
permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run tests
      run: ./gradlew test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: JUnit Tests
        path: build/test-results/test/*.xml
        reporter: java-junit

  sonar:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloud需要完整的Git历史

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build and analyze with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew build sonar --info

  deploy-dev:
    needs: [test, sonar]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build application
      run: ./gradlew build -x test

    # Railway会直接从源码构建，跳过Docker Hub步骤

    - name: Install Railway CLI
      if: github.event_name != 'pull_request'
      run: npm install -g @railway/cli

    - name: Deploy to Railway Dev
      if: github.event_name != 'pull_request'
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway link ${{ secrets.RAILWAY_PROJECT_ID }} --environment dev
        railway up --detach
        
        # 等待应用服务创建
        sleep 10
        
        # 配置环境变量（如果在GitHub Secrets中配置了数据库信息）
        if [ ! -z "${{ secrets.DEV_DATABASE_URL }}" ]; then
          railway variables set SPRING_PROFILES_ACTIVE=dev
          railway variables set DATABASE_URL="${{ secrets.DEV_DATABASE_URL }}"
          railway variables set MYSQL_HOST="${{ secrets.DEV_MYSQL_HOST }}"
          railway variables set MYSQL_PORT="${{ secrets.DEV_MYSQL_PORT }}"
          railway variables set MYSQL_USERNAME="${{ secrets.DEV_MYSQL_USERNAME }}"
          railway variables set MYSQL_PASSWORD="${{ secrets.DEV_MYSQL_PASSWORD }}"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
