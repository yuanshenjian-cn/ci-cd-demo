name: Main Branch CI/CD to Dev

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run tests
      run: ./gradlew test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: [Report] JUnit Tests
        path: build/test-results/test/*.xml
        reporter: java-junit

  sonar:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloudÈúÄË¶ÅÂÆåÊï¥ÁöÑGitÂéÜÂè≤

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build and analyze with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew build sonar --info

  deploy-dev:
    needs: [test, sonar]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build application
      run: ./gradlew build -x test

    - name: Install Railway CLI
      if: github.event_name != 'pull_request'
      run: npm install -g @railway/cli

    - name: Authenticate with Railway
      if: github.event_name != 'pull_request'
      run: |
        echo "üîç Railway Authentication Setup"
        echo "==============================="
        echo "CLI Version:"
        railway --version
        echo "Token: $(echo '${{ secrets.RAILWAY_TOKEN }}' | cut -c1-8)..."
        echo "Project ID: ${{ secrets.RAILWAY_PROJECT_ID }}"
        echo ""
        echo "üîê Logging in to Railway..."
        echo '${{ secrets.RAILWAY_TOKEN }}' | railway login
        echo "Verifying authentication..."
        railway whoami
        echo "‚úÖ Railway authentication successful"
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: Deploy to Railway Dev
      if: github.event_name != 'pull_request'
      run: |
        echo "Linking to project: ${{ secrets.RAILWAY_PROJECT_ID }}"
        railway link ${{ secrets.RAILWAY_PROJECT_ID }} --environment dev
        echo "Starting deployment..."
        railway up --detach
        echo "Deployment initiated"
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
